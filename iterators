nums=[1,4,45,9]
#there are many ways to display the values in the list.
for i in nums:
    print(i)
output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
4
45
9

Process finished with exit code 0
=======================================================================
nums=[1,4,45,9]
print(nums[0])
print(nums[3])
print(nums[2])
print(nums[1])
output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
9
45
4

Process finished with exit code 0
==============================================================================
nums=[1,4,45,9]
print(nums[0])
print(nums[3])
print(nums[2])
print(nums[10])

output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
Traceback (most recent call last):
  File "/home/ansible-practice/PycharmProjects/test/1.py", line 5, in <module>
    print(nums[10])
IndexError: list index out of range
1
9
45

Process finished with exit code 1
===========================================================================================
there are 2 ways to display the values in the list, two functions are iter and next as following.
===========================================================================================
nums=[1,4,45,9]
x=iter(nums)
print(x.__next__())
print(x.__next__())
print(x.__next__())
output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
4
45

Process finished with exit code 0
===================================================================================================
nums=[1,4,45,9]
x=iter(nums)
print(x.__next__()) # it gives first value
print(x.__next__())# it knows last value of i, given and gives next value 
print(x.__next__())
print(x.__next__())
print(x.__next__())

output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
4
45
9
Traceback (most recent call last):
  File "/home/ansible-practice/PycharmProjects/test/1.py", line 7, in <module>
    print(x.__next__())
StopIteration

Process finished with exit code 1
========================================================================================================
and
=========================================================================================================
nums=[1,4,45,9]
x=iter(nums)
print(next(x))
print(next(x))
print(next(x))
print(next(x))

output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
4
45
9

Process finished with exit code 0
===============================================================================================================
nums=[1,4,45,9]
x=iter(nums)
print(next(x)) # it displays first value.
print(x.__next__()) # it knows the last value displayed , then it displays next value
for i in nums:
    print(i)
output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
4
1
4
45
9

Process finished with exit code 0
===================================================================================================
we can create our own object, class as following.
====================================================================================================

class topten:
    def __init__(self):
        self.num=1
    #if we want to get our own iterator, we need 2 important methods(functions).
    def __iter__(self):
        return self
    def __next__(self):
        val=self.num
        self.num+=1
        return val
values=topten()
for i in values:
    print(i)
    output:
    for this program we get infinite numbers continuously, because we didnt mentioned last number.
   =====================================================================================================
   but we need to get manually each nuber , this is not correct, we should get through for loop as well.
   =====================================================================================================
   class topten:
    def __init__(self):
        self.num=1
    #if we want to get our own iterator, we need 2 important methods(functions).
    def __iter__(self):
        return self
    def __next__(self):
        if self.num<=10:

            val=self.num
            self.num+=1
            return val
        else:
            raise StopIteration # this is raising exception.
values=topten()
for i in values:
    print(i)
   output:
   /home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
2
3
4
5
6
7
8
9
10

Process finished with exit code 0
================================================================================
if we dont mention else : raise ... we get infinite None...to avoid this, we should give raise StopIteration.
=================================================================================
class topten:
    def __init__(self):
        self.num=1
    #if we want to get our own iterator, we need 2 important methods(functions).
    def __iter__(self):
        return self
    def __next__(self):
        if self.num<=10:

            val=self.num
            self.num+=1
            return val
        else:
            raise StopIteration # this is raising exception.
values=topten()
print(next(values))
print(next(values))
print(values.__next__())
print(next(values))
for i in values:
    print(i)
output:
/home/ansible-practice/PycharmProjects/test/venv/bin/python /home/ansible-practice/PycharmProjects/test/1.py
1
2
3
4
5
6
7
8
9
10

Process finished with exit code 0
=========================================================================================================
for loop also know the previous value displayed and displays the next values.
